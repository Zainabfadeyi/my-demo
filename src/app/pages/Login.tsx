import React, { useEffect, useState } from 'react';
import styles from "../../styles/register.module.css";
import { AuthResponse } from '../../api/registerApi';
import { VerificationRequest, verifyCodeApi } from '../../api/verifyCodeApi';
import { loginService } from '../../api/loginService';
import { useNavigate } from 'react-router-dom';
import { login } from '../../api/slices/authSlice';
import { useDispatch, useSelector } from 'react-redux'; 
import { RootState } from '../../api/store';
import { setUser } from '../../api/slices/userSlice';

const Login: React.FC = () => {
  const{loginApi, userDetailsAPi}= loginService()

  const [authResponse, setAuthResponse] = useState<AuthResponse | null>(null);
  const [validationCode, setValidtionCode] = useState("");
  const [isButtonDisabled, setIsButtonDisabled] = useState(true);
  const [error, setError] = useState("");
  const [email, setEmail] = useState("");
  const [verificationRequest, setVerificationRequest] = useState<VerificationRequest | null>(null);
  const dispatch = useDispatch();
  const isAuthenticated = useSelector((state: RootState) => state.auth.isAuthenticated);
  const navigate = useNavigate();
  
  useEffect(() => {
    setIsButtonDisabled(validationCode.length !== 6);
  }, [validationCode]);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const email = formData.get('email') as string;
    const password = formData.get('password') as string;
    setEmail(email);
    console.log("credentials", email, password);
    try {
      const response = await loginApi(email, password);
      console.log("this is auth response", response);
      setAuthResponse(response);

      const token=response.token;
      // Dispatch login action to store the state in Redux
      dispatch(login({...response.user,token}));
      const userDetails = await userDetailsAPi()
      dispatch(setUser(userDetails))

      if (response.mfaEnabled !== true) {
        navigate('/welcome');
      }
    } catch (error) {
      setError('Login failed');
      console.error('Error during login', error);
    }
  };

  const handleVerify = async () => {
    try {
      const verify = await verifyCodeApi(email, validationCode);
      setVerificationRequest(verify);
      navigate('/welcome');
    } catch (error) {
      setError('Verification failed');
      console.error('Error verifying code', error);
    }
  };

  useEffect(() => {}, [isAuthenticated]);

  return (
    <div>
      <section>
        <h1>Login</h1>
        <form action="login" className={styles.formReg} onSubmit={handleSubmit}>
          <label htmlFor="email">Email: </label>
          <input
            className="inputReg"
            type="email"
            id="email"
            autoComplete="off"
            name="email"
            required
          />
          <label htmlFor="password">Password: </label>
          <input
            className="inputReg"
            type="password"
            id="password"
            name="password"
            required
          />
          <button type="submit">
            Sign In
          </button>
          
          {authResponse && authResponse.mfaEnabled && (
            <div>
              <h2>Two-Factor Authentication</h2>
              <div>
                <label>Enter 6 digits Validation Code Generated by the app: </label>
                <input 
                  type="text"
                  id="validationCode"
                  name="validationCode"
                  required
                  onChange={(e) => setValidtionCode(e.target.value)}
                />
                <button
                  type='button'
                  className={styles.ButtonStyle}
                  disabled={isButtonDisabled}
                  onClick={handleVerify}
                >Verify code
                </button>
              </div>
            </div>
          )}         
        </form>
      </section>
    </div>
  );
};

export default Login;
