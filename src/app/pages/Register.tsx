import React, { useEffect, useState } from 'react'
import { Link } from 'react-router-dom'
import styles from "../../styles/register.module.css"
import { registerApi, AuthResponse } from '../../api/registerApi'
import { verifyCodeApi,VerificationRequest } from '../../api/verifyCodeApi'
import { useNavigate } from 'react-router-dom'
import { useDispatch } from '../../api/hook'

const Register:React.FC = () => {

    const [authResponse, setAuthResponse]= useState<AuthResponse|null>(null)
    const [error, setError]= useState("");
    const [mfaEnabled, setMfaEnabled] = useState(false)
    const [validationCode, setValidtionCode ]=useState("")
    const [isButtonDisabled, setIsButtonDisabled]= useState(true)
    const [verificationRequest, setVerificationRequest]= useState<VerificationRequest|null>(null)
    const[email, setEmail]=useState("")
    const navigate= useNavigate();
    const dispatch = useDispatch();
    const handleSubmit = async (event:React.FormEvent<HTMLFormElement>)=> {
        event.preventDefault();

        const formData = new FormData(event.currentTarget);

        const firstName = formData.get('firstname') as string;
        const lastName = formData.get('lastname') as string;
        const email = formData.get('email') as string;
        const password = formData.get('password') as string;
        setEmail(email)
        
        try {
          const response = await registerApi(firstName, lastName, email, password, mfaEnabled);

          setAuthResponse(response);
         
          
        
        } catch (error) {
          setError('Registration failed. Please try again.');
          console.error('Error during registration:', error);
        }
    
    }

    const handleVerify= async()=>{
      
      try{
        const verify=await verifyCodeApi(email,validationCode )
        setVerificationRequest(verify)
        navigate('/login')
      }catch(error){
        setError('Verification failed');
        console.error('error verifying code', error);
      }
    }
      
    
    useEffect(()=> {
        setIsButtonDisabled(validationCode.length !==6);
    },[validationCode])
    
    useEffect(() => {
      localStorage.setItem('mfaEnabled', mfaEnabled.toString());
    }, [mfaEnabled]);
  return (
    <div>
        <section>
            <h1>
                Register
            </h1>
            <form className={styles.formReg} onSubmit={handleSubmit}>
                <label>First Name: </label>
                <input 
                type="text"
                id='firstname'
                autoComplete='off'
                name="firstname"
                required 
                
                />
                <label>Last Name: </label>
                <input 
                type="text"
                id='lastname'
                autoComplete='off'
                name="lastname"
                required />
                <label htmlFor="email">Email: </label>
                <input
                    className="inputReg"
                    type="email"
                    id="email"
                    autoComplete="off"
                    name="email"
                    required 
                    />
                    <label htmlFor="passowrd">Password: </label>
                <input
                    className="inputReg"
                    type="password"
                    id="password"
                    name="password"
                    required 
                    />
                    <button
                    type="submit"
                    >
                    Sign Up
                    </button>
            </form>
            <p>
                    Already registered?
                    <span >
                    <Link to="/login">Sign in</Link>
                    </span>
                </p>
                <div>
                <div>
                    <input 
                    type="checkbox" 
                    checked={mfaEnabled}
                    onChange={()=> setMfaEnabled(
                      !mfaEnabled)}
                    id="2FA" />
                    <label>Enable 2FA (Two factor Authentication) </label>
                </div>
       {authResponse && authResponse.mfaEnabled &&(
          <div>
            <h2>Set Up Two Factor Authentication</h2>
            <div className={styles.FormGroup}>
              <img src={authResponse.secretImageUri} alt="QR Code" />
            </div>
            <div>
            <label htmlFor=""> Enter 6 digits validation code generated by the app: </label>
            <input 
            type="text" 
            id='validationCode'
            name='validationCode'
            value={validationCode}
            onChange={(e) => setValidtionCode(e.target.value)}
            required/>
            <button
                type='button'
                className={styles.ButtonStyle}
                disabled={isButtonDisabled}
                onClick={handleVerify}>
            Verify code
        </button>
        </div>
          </div>
        )}
        
        
        </div>
        </section>
        
    </div>
  )
}

export default Register;

